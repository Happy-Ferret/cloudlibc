#!/bin/sh

set -e

: ${CC:=x86_64-unknown-cloudabi-cc}
: ${AR:=x86_64-unknown-cloudabi-ar}
: ${NM:=x86_64-unknown-cloudabi-nm}
: ${PREFIX:=/usr/local/$(${CC} -dumpmachine)}

export WARNFLAGS="-Werror -Werror-pointer-arith -Wall -Wsystem-headers \
-Wold-style-definition -Wreturn-type -Wwrite-strings -Wswitch \
-Wchar-subscripts -Wnested-externs -Wshadow -Wmissing-prototypes \
-Wstrict-prototypes -Wmissing-variable-declarations -Wthread-safety \
-Wsign-compare -Wundef -Wno-comment"
export HEADERWARNFLAGS="-Werror -Weverything -Wno-c++11-compat \
-Wno-c++98-compat-pedantic -Wno-c11-extensions -Wno-c99-extensions \
-Wno-cast-qual -Wno-comment -Wno-complex-component-init -Wno-float-equal \
-Wno-language-extension-token -Wno-long-long -Wno-old-style-cast -Wno-padded \
-Wno-pedantic -Wno-reserved-id-macro -Wno-variadic-macros"

echo "=> Testing headers"
for std in c89 gnu89 c90 gnu90 c99 gnu99 c11 gnu11; do
  (cd src/include; find * -type f | grep -v '^_/') | while read header; do
    echo "#include <$header>"
  done | (sort -R 2> /dev/null || sort) | ${CC} ${HEADERWARNFLAGS} -nostdinc \
      -Isrc/include -std="${std}" -x c -c -o /dev/null -
done
for std in c++98 gnu++98 c++03 c++11 gnu++11 c++14 gnu++14; do
  (cd src/include; find * -type f | grep -v '^_/') | while read header; do
    echo "#include <$header>"
  done | (sort -R 2> /dev/null || sort) | ${CC} ${HEADERWARNFLAGS} -nostdinc \
      -Isrc/include -std="${std}" -x c++ -c -o /dev/null -
done

./build "$@"

if [ "$1" != "fast" ] && type clang-format; then
  echo "=> Reformatting sources"
  # Pass all source files through clang-format.
  find src tools -name '*.[ch]' -o -name '*.cc' | sort | while read srcfile; do
    clang-format "${srcfile}" > _obj/clang-format
    if ! cmp -s _obj/clang-format "${srcfile}"; then
      echo "=> Style fixing ${srcfile}"
      mv _obj/clang-format "${srcfile}"
    fi
  done
  # Invoke the build again if we had to fix up one or more sources files.
  ./build fast
fi

# Ensure that no unexpected symbols remain unresolved. Some symbols are
# provided by compiler-rt, so they are known to be absent. The main()
# function is of course provided by the application linked against this
# library.
(cat << EOF
__addtf3
__aeabi_d2lz
__aeabi_d2ulz
__aeabi_f2lz
__aeabi_idivmod
__aeabi_l2d
__aeabi_ldivmod
__aeabi_uidiv
__aeabi_uidivmod
__aeabi_ul2d
__aeabi_uldivmod
__divdi3
__divtf3
__eqtf2
__extenddftf2
__extendsftf2
__fixtfdi
__fixtfsi
__floatditf
__floatsitf
__floatunsitf
__getf2
__gttf2
__letf2
__lttf2
__moddi3
__muldc3
__mulodi4
__muloti4
__mulsc3
__multc3
__multf3
__mulxc3
__netf2
__subtf3
__trunctfdf2
__trunctfsf2
__udivdi3
__umoddi3
__unorddf2
__unordtf2
main
EOF
(${NM} -g --defined-only _obj/libc.a
find src/crt -name "*.[cS]" |
    sed -e 's/.*\///' -e 's/\.[a-zA-Z]*$//' | while read crt; do
  ${NM} -g --defined-only _obj/src_crt_${crt}.o
done) | grep '\<[A-Z]\>' | awk '{print $3}') | sort > _obj/defined
${NM} -u _obj/libc.a | grep '\<U\>' | awk '{print $2}' | \
    grep -ve '^__start_' -e '^__stop_' | sort -u > _obj/undefined
if [ "$(comm -13 _obj/defined _obj/undefined)" != "" ]; then
  echo "Library leaves unresolved symbols:"
  comm -13 _obj/defined _obj/undefined
  exit 1
fi

# Ensure that no unexpected symbols are declared in the public namespace.
${NM} --defined-only -g _obj/libc.a | grep ' [A-Z] ' | awk '{print $3}' | \
    grep -v -e '^_[A-Z]' -e '^__' | LC_ALL=C sort > _obj/symbols
if ! cmp -s src/libc/symbols _obj/symbols; then
  echo "Library exports unexpected symbols:"
  diff src/libc/symbols _obj/symbols
  exit 1
fi

PREFIX="${PREFIX}" sudo -E ./install
